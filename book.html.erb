**レンダリング**・・・実際に画面に表示される内容を生成する作業

**ルーティング**・・・アクセスしたアドレスと、呼び出されるアクションメソッドの関係を設定すること

**クエリーパラメータ**・・・WebブラウザでWebページにアクセスするときのアドレスに付け足すパラメータのこと（クエリーパラメータで送られた情報は「params」というハッシュにまとめられる）

**ERB**・・・Embedded Rubyの略。ERBは、HTMLのタグの中に特殊なタグを埋め込んでRubyのコードを実行できるようにする技術。このERBを使ってRailsのテンプレートは作成されている。

**Sass**・・・スタイルシートを記述する一種言語。非常に強力な機能を提供してくれる。（.scssという拡張子のファイルは、「Sass」という、スタイルシートを拡張したプログラムのファイル）

**Get と Post**・・・**Post**というのはフォームなどを送信する際の基本。「そのとき、その状況での表示」を行うような場合に使われる。**Get**はアクセスの基本。「いつ、どこからどうアクセスしても常に同じ結果が返される」というようなものに使う。（Getはどこからアクセスしても同じ結果が得られる。Postはアクセスごとに固有の結果が得られる。）

**CSRF**・・・「Cross Site Request Forgery」外部のサーバーからフォームなどに送信するサイト攻撃のこと。Railsでは、フォームの利用に関する特別な機能を持っていて、決まった方式でフォームを用意しないと送信を受け付けないようになっている。

授業まとめ

get 'hello' , to: 'hello#index

hello#にアクセスしたらhelloコントローラーのインデックスアクションをする

中身なくてもアクション作る

フォームヘルパー：何かの処理をまとめてあるもの

**SQL**・・・データアクセス言語（データベースにアクセスし必要なデータを検索するための言語）

RailsではSQLite以外のデータベースも使うことができる。「どんなデータベースを使っても、書くコードは変わらない」

**YAML**・・・構造的なデータをテキストで表すためのフォーマット

データベースを使うために一番初めに行うことは、「テーブルを用意する」ということ。

テーブルというのは、データベース内に用意されるデータの保管場所。

テーブルには、そのテーブルにはどういう値が保管できるかをあらかじめ定義しておく。

**マイグレーション**・・・「データベースのアップデート作業」のこと。データベースの修正などの情報をあらかじめ用意しておき、それを元にデータベースを最新の状態に更新するのがマイグレーション。

モデルを作成する際、「rails generate model でモデルを作ったら、すぐにrails db:migrateしておく」

万が一忘れたまま実行してしまった場合でも、エラー画面から「Run Pending migrations」ボタンを押して実行すればおk！（モデルを作成した際にできたマイグレーションファイルにカラム追記することができる）

**マイグレーションファイル**：データベースを生成する際の設計図

**カラム**：テーブルの列

モデルと、モデルを利用するコントローラーを作る場合、Railsでは「モデルは単数形」「コントローラーは複数形」という形で作成する、という命名規則がある。

private・・・メソッドのアクセスを制約するためのキーワード

アクションメソッドは必ず「private」よりも上に書く。（privateよりも下に書いてしまうと、アクションとして外部から呼び出せなくなり、エラーになってしまうため）

updateはフォームを送信する際の処理を行う。

## CRUD

CRUDはデータ操作の基本！

C(create)・・・データを新しく作り保存する

R(read)・・・特定のデータを読み込み保存する
U(update)・・・特定のデータの内容を変更し更新する
D(delete)・・・特定のデータを削除する

※その他※

all・・・全てのデータを取り出す

find・・・ID番号を引数に指定すると、そのデータを取り出す

＊新しいアプリケーションを設計するときのMVCの作り方＊

1. テーブルの設計　（データベースを利用するアプリケーションを作成するとき、まず最初に考えるべきは「データベース設計」←念入りに行う必要あり）
2. モデルを設計　（データベース（テーブル）の仕様が決まれば、それを元にモデルを作成できる）
3. コントローラーとビューを設計（どのようなアクションが必要か分かっていれば、ビューのテンプレートを同時に生成できる。）
4. 処理とテンプレートを作成　（コントローラー全体を一度に作ろうとせず、1つ1つのアクションごとに必要な処理を整理しながらプログラミングしていくと良い。）
5. その他残りを作成　（スタイルシートやルーティング設定を作成し、完成）

＊様々なアクション＊

・index・・・全データの一覧表示を行うホーム画面

・show・・・選択した項目の全内容を表示する

・add・・・データの追加を行う。フォームの表示とPOST送信の両方を処理する

・edit・・・データの更新を行う。フォームによる編集画面と、POST送信後の処理を行う

・delete・・・データの削除を行う。テンプレートは不要。

モデル作成（rails generate model 〇〇）

　　↓　（カラムを追記することができる）

マイグレーションの実行（rails db:migrate）

　　↓

シードの実行（rails db:seed）

## 基本的な流れ

・ターミナルにてデスクトップに移動し、（cd desktop）

・rails new アプリケーション名　（rails new RailsApp）

　でアプリを作成。

・アプリの中に移動し、（cd RailsApp）

・rails server を実行し、ブラウザで確認。（http://localhost:3000/）

・コントローラーを作成する（rails generate controller コントローラー名）（rails generate controller 　hello）

・コントローラーファイル（hello_controller.rb）のなかにアクションメソッド(def ~ end)を追加する。

　【例えば、Webブラウザにテキストを表示したいときは、アクションメソッドのなかに、

　render plain:テキスト　といった形で記述すれば良い。

・viewsフォルダ内の(今回ならばhelloフォルダ内に)index.html.erbという名前でファイルを作成。そこにHTMLを書き込む。ただし、Railsでは<body>タグ内に書かれる、実際に画面に表示される部分のタグだけを記述する。

・スタイルシートを準備する。（スタイルシートはassetsフォルダの中にあるstylesheetsフォルダにまとめられる。この中に.scssというファイルがある。）

・ルーティングの設定を行う。（configフォルダの中にある、routes.rbというファイルに書き込む）

　（  get 'コントローラー/アクション'  ）

　（  get 'アドレス' to: 'コントローラー#アクション'  ）

　（例：get 'hello', to: 'hello#index'      helloでhelloコントローラのindexアクションにルーティン

　　　　グ）

⚠️HTMLのソースコードをレンダリングする際は、html_safeを使う。（例：render html: msg.html_safe）

・外から値を受け取って表示する際には、クエリーパラメーターを使う。

（Railsではクエリーパラメーターで送られた値は、「params」というハッシュにまとめられる）

⚠️新しいアクションを作成したら、アクションのルート情報を追加する。

ーーーーーーーーーーーーふりがなRubyーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

localhost・・・このコンピュータ自体、を意味している

localhost:3000・・・このコンピューター自体の3000番ポートを使用している通信プログラム、という意味

scaffold・・・scaffoldを指定すると、モデルやコントローラーなど必要なものを一式揃えてくれる（rails g scaffold モデル名 カラム名）

scaffoldで作成したHTMLはJavaScriptのプログラムを読み込むように設計されている。このプログラムは、リンクがクリックされたときにa要素に「data-confirm」が指定されていれば確認メッセージを表示し、「OK」がクリックされたらDELETEメソッド付きのHTTPリクエストを送信する。

select・・・selectは直訳すると「選択しろ」であるが、テーブル内の何かを表示する働きを持つので、「表示しろ」と意訳する。